package org.yarlithub.yschool.repository.model.obj.yschool;

import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Transient;
import org.hibernate.proxy.HibernateProxy;
import org.yarlithub.yschool.repository.enums.subtype.yschool.ResultsSubclassType;
import org.yarlithub.yschool.repository.model.obj.yschool.Results;
import org.yarlithub.yschool.repository.model.obj.yschool.iface.IResultsRank;


/** 
 * Object mapping for hibernate-handled table: results_rank.
 * @author autogenerated
 */

@Entity
@PrimaryKeyJoinColumn(name = "results_idresults")
@Table(name = "results_rank", catalog = "yschool", schema = "yschool")
public class ResultsRank extends Results implements  IResultsRank {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558977427L;

	

	/** Field mapping. */
	private Integer rank1;
	/** Field mapping. */
	private Integer rank2;
	/** Field mapping. */
	private Integer rank3;
	/** Field mapping. */
	private Double zscore;
 

	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return ResultsSubclassType enum.
 	 */
 	@Transient
 	@Override
 	public ResultsSubclassType getResultsSubclassType() {
		return ResultsSubclassType.RESULTS_RANK;
 	}  

 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Override
	@Transient
	public Class<?> getClassType() {
		return ResultsRank.class;
	}
 

    /**
     * Return the value associated with the column: rank1.
	 * @return A Integer object (this.rank1)
	 */
	public Integer getRank1() {
		return this.rank1;
		
	}
	

  
    /**  
     * Set the value related to the column: rank1.
	 * @param rank1 the rank1 value you wish to set
	 */
	public void setRank1(final Integer rank1) {
		this.rank1 = rank1;
	}

    /**
     * Return the value associated with the column: rank2.
	 * @return A Integer object (this.rank2)
	 */
	public Integer getRank2() {
		return this.rank2;
		
	}
	

  
    /**  
     * Set the value related to the column: rank2.
	 * @param rank2 the rank2 value you wish to set
	 */
	public void setRank2(final Integer rank2) {
		this.rank2 = rank2;
	}

    /**
     * Return the value associated with the column: rank3.
	 * @return A Integer object (this.rank3)
	 */
	public Integer getRank3() {
		return this.rank3;
		
	}
	

  
    /**  
     * Set the value related to the column: rank3.
	 * @param rank3 the rank3 value you wish to set
	 */
	public void setRank3(final Integer rank3) {
		this.rank3 = rank3;
	}

    /**
     * Return the value associated with the column: zscore.
	 * @return A Double object (this.zscore)
	 */
	public Double getZscore() {
		return this.zscore;
		
	}
	

  
    /**  
     * Set the value related to the column: zscore.
	 * @param zscore the zscore value you wish to set
	 */
	public void setZscore(final Double zscore) {
		this.zscore = zscore;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public ResultsRank clone() throws CloneNotSupportedException {
		
        final ResultsRank copy = (ResultsRank)super.clone();

		copy.setRank1(this.getRank1());
		copy.setRank2(this.getRank2());
		copy.setRank3(this.getRank3());
		copy.setZscore(this.getZscore());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("rank1: " + this.getRank1() + ", ");
		sb.append("rank2: " + this.getRank2() + ", ");
		sb.append("rank3: " + this.getRank3() + ", ");
		sb.append("zscore: " + this.getZscore());
		if (this.getClass().getSuperclass() != this.getClass()) {
			sb.append("(super.toString=" + super.toString() + ")");
		}
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		
		if (aThat instanceof HibernateProxy) {
 			// narrow down the proxy to the class we are dealing with.
 			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation(); 
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		   	}
		}
		if (aThat == null)  {
			 return false;
		}
		
		final ResultsRank that; 
		try {
			that = (ResultsRank) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		if (this.getClass().getSuperclass() != this.getClass()) {
			result = super.equals(that);
		}
		result = result && (((this.getId() == null) && ( that.getId() == null)) || (this.getId() != null  && this.getId().equals(that.getId())));
		result = result && (((getRank1() == null) && (that.getRank1() == null)) || (getRank1() != null && getRank1().equals(that.getRank1())));
		result = result && (((getRank2() == null) && (that.getRank2() == null)) || (getRank2() != null && getRank2().equals(that.getRank2())));
		result = result && (((getRank3() == null) && (that.getRank3() == null)) || (getRank3() != null && getRank3().equals(that.getRank3())));
		result = result && (((getZscore() == null) && (that.getZscore() == null)) || (getZscore() != null && getZscore().equals(that.getZscore())));
		return result;
	}
	
	

	
}
