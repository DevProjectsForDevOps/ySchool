package org.yarlithub.yschool.repository.model.obj.yschool;

import com.felees.hbnpojogen.persistence.IPojoGenEntity;
import java.io.Serializable;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Embeddable;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Transient;
import org.yarlithub.yschool.repository.model.obj.yschool.iface.IExamSyncPK;


/** 
 * Object mapping for hibernate-handled table: exam_sync.
 * @author autogenerated
 */

@Embeddable
public class ExamSyncPK implements Cloneable, Serializable,  IExamSyncPK {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558977427L;

	

	/** Field mapping. */
	@Column( name = "class_idexam", nullable = false  )
	private Integer classIdexam;

	/** Field mapping. */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "exam_idexam", nullable = false , insertable = false, updatable = false )
	private Exam examIdexam;

	/** Field mapping. */
	@Column( name = "idexam_sync", nullable = false  )
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer idexamSync;

 


 
	/** Return the type of this class. Useful for when dealing with proxies.
	* @return Defining class.
	*/
	@Transient
	public Class<?> getClassType() {
		return ExamSyncPK.class;
	}
 

    /**
     * Return the value associated with the column: classIdexam.
	 * @return A Integer object (this.classIdexam)
	 */
	public Integer getClassIdexam() {
		return this.classIdexam;
		
	}
	

  
    /**  
     * Set the value related to the column: classIdexam.
	 * @param classIdexam the classIdexam value you wish to set
	 */
	public void setClassIdexam(final Integer classIdexam) {
		this.classIdexam = classIdexam;
	}

    /**
     * Return the value associated with the column: examIdexam.
	 * @return A Exam object (this.examIdexam)
	 */
	public Exam getExamIdexam() {
		return this.examIdexam;
		
	}
	

  
    /**  
     * Set the value related to the column: examIdexam.
	 * @param examIdexam the examIdexam value you wish to set
	 */
	public void setExamIdexam(final Exam examIdexam) {
		this.examIdexam = examIdexam;
	}

    /**
     * Return the value associated with the column: idexamSync.
	 * @return A Integer object (this.idexamSync)
	 */
	public Integer getIdexamSync() {
		return this.idexamSync;
		
	}
	

  
    /**  
     * Set the value related to the column: idexamSync.
	 * @param idexamSync the idexamSync value you wish to set
	 */
	public void setIdexamSync(final Integer idexamSync) {
		this.idexamSync = idexamSync;
	}


   /**
    * Deep copy.
	* @return cloned object
	* @throws CloneNotSupportedException on error
    */
    @Override
    public ExamSyncPK clone() throws CloneNotSupportedException {
		
        final ExamSyncPK copy = (ExamSyncPK)super.clone();

		copy.setClassIdexam(this.getClassIdexam());
		copy.setIdexamSync(this.getIdexamSync());
		return copy;
	}
	


	/** Provides toString implementation.
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		
		sb.append("classIdexam: " + this.getClassIdexam() + ", ");
		sb.append("idexamSync: " + this.getIdexamSync());
		return sb.toString();		
	}


	/** Equals implementation. 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;
		
		if ( this == aThat ) {
			 return true;
		}

		if (aThat == null)  {
			 return false;
		}
		
		final ExamSyncPK that; 
		try {
			that = (ExamSyncPK) proxyThat;
			if ( !(that.getClassType().equals(this.getClassType()))){
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
		} catch (ClassCastException e) {
				return false;
		}
		
		
		boolean result = true;
		result = result && (((getClassIdexam() == null) && (that.getClassIdexam() == null)) || (getClassIdexam() != null && getClassIdexam().equals(that.getClassIdexam())));
		result = result && (((getExamIdexam() == null) && (that.getExamIdexam() == null)) || (getExamIdexam() != null && getExamIdexam().getId().equals(that.getExamIdexam().getId())));	
		result = result && (((getIdexamSync() == null) && (that.getIdexamSync() == null)) || (getIdexamSync() != null && getIdexamSync().equals(that.getIdexamSync())));
		return result;
	}
	
	/** Calculate the hashcode.
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
	int hash = 0;
		hash = hash + getClassIdexam().hashCode();
		hash = hash + getExamIdexam().hashCode();
		hash = hash + getIdexamSync().hashCode();
	return hash;
	}
	

	
}
