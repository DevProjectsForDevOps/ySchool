package org.yarlithub.yschool.repository.factories.yschool;

import com.felees.hbnpojogen.randomlib.data.dataGeneration.*;
import org.springframework.stereotype.Component;
import org.yarlithub.yschool.repository.factories.yschool.YschoolDataPoolFactory;
import org.yarlithub.yschool.repository.model.obj.yschool.*;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import java.util.Collection;
import com.felees.hbnpojogen.randomlib.data.dataGeneration.BasicDataGenerator;


/** 
 * DAO factory implementation.
 * @author autogenerated
 */
@Component
public class YschoolDataPoolFactory {
	/** Table commit order. */
    private static final Multimap<String, String> tableDeps = ArrayListMultimap.create();
	/** DB commit order. */
	private static final String[] commitOrder = new String[]{"User", "StudentClassroomSubject", "SectionHasStaffHasRole", "SchoolHasStaffHasRole", "Results", "Marks", "ClassroomSubjectHasStaffHasRole", "ClassroomSubject", "ClassroomStudent", "ClassroomHasStaffHasRole", "UserRole", "Subject", "Student", "StaffHasRole", "Staff", "Section", "School", "Role", "ExamType", "Exam", "Classroom"};
	static{
		// Store table deps for possible use. 
 		tableDeps.put("ClassroomHasStaffHasRole", "Classroom");
 		tableDeps.put("ClassroomHasStaffHasRole", "StaffHasRole");
 		tableDeps.put("ClassroomStudent", "Classroom");
 		tableDeps.put("ClassroomStudent", "Student");
 		tableDeps.put("ClassroomSubject", "Classroom");
 		tableDeps.put("ClassroomSubject", "Subject");
 		tableDeps.put("ClassroomSubjectHasStaffHasRole", "ClassroomSubject");
 		tableDeps.put("ClassroomSubjectHasStaffHasRole", "StaffHasRole");
 		tableDeps.put("Marks", "Exam");
 		tableDeps.put("Marks", "Student");
 		tableDeps.put("Results", "Exam");
 		tableDeps.put("Results", "Student");
 		tableDeps.put("SchoolHasStaffHasRole", "School");
 		tableDeps.put("SchoolHasStaffHasRole", "StaffHasRole");
 		tableDeps.put("SectionHasStaffHasRole", "Section");
 		tableDeps.put("SectionHasStaffHasRole", "StaffHasRole");
 		tableDeps.put("StaffHasRole", "Role");
 		tableDeps.put("StaffHasRole", "Staff");
 		tableDeps.put("StudentClassroomSubject", "ClassroomStudent");
 		tableDeps.put("StudentClassroomSubject", "ClassroomSubject");
 		tableDeps.put("User", "UserRole");
	}

    /**
     * Data pool factory for Classroom.
     * @return Classroom A Classroom object
     */
    public static Classroom getClassroom() {

        Classroom classroom =  getClassroom(
	        null);

		return classroom;
       
    }

     /**
     * Data pool factory for Classroom.
     * @param sectionIdsection A valid Section object
     * @return Classroom A Classroom object
     */
    public static Classroom getClassroom(Section sectionIdsection) {
        Classroom classroom = new Classroom();     
        classroom.setDivision(BasicDataGenerator.generateRandomString(45));
        classroom.setGrade(BasicDataGenerator.generateRandomInt());
		if (sectionIdsection != null) {
			sectionIdsection.addClassroom (classroom);
		}
        classroom.setYear(BasicDataGenerator.generateRandomInt());

        return classroom;
    }

    /**
     * Data pool factory for ClassroomHasStaffHasRole.
     * @return ClassroomHasStaffHasRoleA ClassroomHasStaffHasRole object
     */
    public static ClassroomHasStaffHasRole getClassroomHasStaffHasRole() {

        ClassroomHasStaffHasRole classroomHasStaffHasRole = new ClassroomHasStaffHasRole();    
        
        classroomHasStaffHasRole.setId(getClassroomHasStaffHasRolePK());

        return classroomHasStaffHasRole;
    }

    /**
     * Data pool factory for ClassroomHasStaffHasRolePK.
     * @return ClassroomHasStaffHasRolePK A ClassroomHasStaffHasRolePK object
     */
    public static ClassroomHasStaffHasRolePK getClassroomHasStaffHasRolePK() {

        ClassroomHasStaffHasRolePK classroomHasStaffHasRolePK =  getClassroomHasStaffHasRolePK(
	        getClassroom(), getStaffHasRole());

		return classroomHasStaffHasRolePK;
       
    }

     /**
     * Data pool factory for ClassroomHasStaffHasRolePK.
     * @param classroomIdclass A valid Classroom object
     * @param staffHasRoleIdstaffHasRole A valid StaffHasRole object
     * @return ClassroomHasStaffHasRolePK A ClassroomHasStaffHasRolePK object
     */
    public static ClassroomHasStaffHasRolePK getClassroomHasStaffHasRolePK(Classroom classroomIdclass, StaffHasRole staffHasRoleIdstaffHasRole) {
        ClassroomHasStaffHasRolePK classroomHasStaffHasRolePK = new ClassroomHasStaffHasRolePK();     
        classroomHasStaffHasRolePK.setClassroomIdclass(classroomIdclass);
        classroomHasStaffHasRolePK.setStaffHasRoleIdstaffHasRole(staffHasRoleIdstaffHasRole);

        return classroomHasStaffHasRolePK;
    }

    /**
     * Data pool factory for ClassroomStudent.
     * @return ClassroomStudent A ClassroomStudent object
     */
    public static ClassroomStudent getClassroomStudent() {

        ClassroomStudent classroomStudent =  getClassroomStudent(
	        getClassroom(), getStudent());

		return classroomStudent;
       
    }

     /**
     * Data pool factory for ClassroomStudent.
     * @param classroomIdclass A valid Classroom object
     * @param studentIdstudent A valid Student object
     * @return ClassroomStudent A ClassroomStudent object
     */
    public static ClassroomStudent getClassroomStudent(Classroom classroomIdclass, Student studentIdstudent) {
        ClassroomStudent classroomStudent = new ClassroomStudent();     
		if (classroomIdclass != null) {
			classroomIdclass.addClassroomStudent (classroomStudent);
		}
		if (studentIdstudent != null) {
			studentIdstudent.addClassroomStudent (classroomStudent);
		}

        return classroomStudent;
    }

    /**
     * Data pool factory for ClassroomSubject.
     * @return ClassroomSubject A ClassroomSubject object
     */
    public static ClassroomSubject getClassroomSubject() {

        ClassroomSubject classroomSubject =  getClassroomSubject(
	        getClassroom(), getSubject());

		return classroomSubject;
       
    }

     /**
     * Data pool factory for ClassroomSubject.
     * @param classroomIdclass A valid Classroom object
     * @param subjectIdsubject A valid Subject object
     * @return ClassroomSubject A ClassroomSubject object
     */
    public static ClassroomSubject getClassroomSubject(Classroom classroomIdclass, Subject subjectIdsubject) {
        ClassroomSubject classroomSubject = new ClassroomSubject();     
		if (classroomIdclass != null) {
			classroomIdclass.addClassroomSubject (classroomSubject);
		}
		if (subjectIdsubject != null) {
			subjectIdsubject.addClassroomSubject (classroomSubject);
		}

        return classroomSubject;
    }

    /**
     * Data pool factory for ClassroomSubjectHasStaffHasRole.
     * @return ClassroomSubjectHasStaffHasRoleA ClassroomSubjectHasStaffHasRole object
     */
    public static ClassroomSubjectHasStaffHasRole getClassroomSubjectHasStaffHasRole() {

        ClassroomSubjectHasStaffHasRole classroomSubjectHasStaffHasRole = new ClassroomSubjectHasStaffHasRole();    
        
        classroomSubjectHasStaffHasRole.setId(getClassroomSubjectHasStaffHasRolePK());

        return classroomSubjectHasStaffHasRole;
    }

    /**
     * Data pool factory for ClassroomSubjectHasStaffHasRolePK.
     * @return ClassroomSubjectHasStaffHasRolePK A ClassroomSubjectHasStaffHasRolePK object
     */
    public static ClassroomSubjectHasStaffHasRolePK getClassroomSubjectHasStaffHasRolePK() {

        ClassroomSubjectHasStaffHasRolePK classroomSubjectHasStaffHasRolePK =  getClassroomSubjectHasStaffHasRolePK(
	        getClassroomSubject(), getStaffHasRole());

		return classroomSubjectHasStaffHasRolePK;
       
    }

     /**
     * Data pool factory for ClassroomSubjectHasStaffHasRolePK.
     * @param classroomSubjectIdclassroomSubject A valid ClassroomSubject object
     * @param staffHasRoleIdstaffHasRole A valid StaffHasRole object
     * @return ClassroomSubjectHasStaffHasRolePK A ClassroomSubjectHasStaffHasRolePK object
     */
    public static ClassroomSubjectHasStaffHasRolePK getClassroomSubjectHasStaffHasRolePK(ClassroomSubject classroomSubjectIdclassroomSubject, StaffHasRole staffHasRoleIdstaffHasRole) {
        ClassroomSubjectHasStaffHasRolePK classroomSubjectHasStaffHasRolePK = new ClassroomSubjectHasStaffHasRolePK();     
        classroomSubjectHasStaffHasRolePK.setClassroomSubjectIdclassroomSubject(classroomSubjectIdclassroomSubject);
        classroomSubjectHasStaffHasRolePK.setStaffHasRoleIdstaffHasRole(staffHasRoleIdstaffHasRole);

        return classroomSubjectHasStaffHasRolePK;
    }

    /**
     * Data pool factory for Exam.
     * @return Exam A Exam object
     */
    public static Exam getExam() {

        Exam exam =  getExam(
	        null, null);

		return exam;
       
    }

     /**
     * Data pool factory for Exam.
     * @param classroomSubjectIdclassroomSubject A valid ClassroomSubject object
     * @param examTypeIdexamType A valid ExamType object
     * @return Exam A Exam object
     */
    public static Exam getExam(ClassroomSubject classroomSubjectIdclassroomSubject, ExamType examTypeIdexamType) {
        Exam exam = new Exam();     
		if (classroomSubjectIdclassroomSubject != null) {
			classroomSubjectIdclassroomSubject.addExam (exam);
		}
        exam.setDate(BasicDataGenerator.generateDate());
		if (examTypeIdexamType != null) {
			examTypeIdexamType.addExam (exam);
		}
        exam.setTerm(BasicDataGenerator.generateRandomInt());

        return exam;
    }

    /**
     * Data pool factory for ExamType.
     * @return ExamTypeA ExamType object
     */
    public static ExamType getExamType() {

        ExamType examType = new ExamType();    
        
        examType.setTypeName(BasicDataGenerator.generateRandomString(45));

        return examType;
    }

    /**
     * Data pool factory for Marks.
     * @return Marks A Marks object
     */
    public static Marks getMarks() {

        Marks marks =  getMarks(
	        getExam(), getStudent());

		return marks;
       
    }

     /**
     * Data pool factory for Marks.
     * @param examIdexam A valid Exam object
     * @param studentIdstudent A valid Student object
     * @return Marks A Marks object
     */
    public static Marks getMarks(Exam examIdexam, Student studentIdstudent) {
        Marks marks = new Marks();     
		if (examIdexam != null) {
			examIdexam.addMarks (marks);
		}
        marks.setMarks(BasicDataGenerator.generateRandomDouble());
		if (studentIdstudent != null) {
			studentIdstudent.addMarks (marks);
		}

        return marks;
    }

    /**
     * Data pool factory for Results.
     * @return Results A Results object
     */
    public static Results getResults() {

        Results results =  getResults(
	        getExam(), getStudent());

		return results;
       
    }

     /**
     * Data pool factory for Results.
     * @param examIdexam A valid Exam object
     * @param studentIdstudent A valid Student object
     * @return Results A Results object
     */
    public static Results getResults(Exam examIdexam, Student studentIdstudent) {
        Results results = new Results();     
		if (examIdexam != null) {
			examIdexam.addResults (results);
		}
        results.setId(BasicDataGenerator.generateRandomInt());
        results.setResults(BasicDataGenerator.generateRandomString(5));
		if (studentIdstudent != null) {
			studentIdstudent.addResults (results);
		}

        return results;
    }

    /**
     * Data pool factory for Role.
     * @return RoleA Role object
     */
    public static Role getRole() {

        Role role = new Role();    
        
        role.setRoleName(BasicDataGenerator.generateRandomString(45));

        return role;
    }

    /**
     * Data pool factory for School.
     * @return SchoolA School object
     */
    public static School getSchool() {

        School school = new School();    
        
        school.setAddress(BasicDataGenerator.generateRandomString(45));
        school.setDistrict(BasicDataGenerator.generateRandomString(45));
        school.setName(BasicDataGenerator.generateRandomString(45));
        school.setProvince(BasicDataGenerator.generateRandomString(45));
        school.setZone(BasicDataGenerator.generateRandomString(45));

        return school;
    }

    /**
     * Data pool factory for SchoolHasStaffHasRole.
     * @return SchoolHasStaffHasRoleA SchoolHasStaffHasRole object
     */
    public static SchoolHasStaffHasRole getSchoolHasStaffHasRole() {

        SchoolHasStaffHasRole schoolHasStaffHasRole = new SchoolHasStaffHasRole();    
        
        schoolHasStaffHasRole.setId(getSchoolHasStaffHasRolePK());

        return schoolHasStaffHasRole;
    }

    /**
     * Data pool factory for SchoolHasStaffHasRolePK.
     * @return SchoolHasStaffHasRolePK A SchoolHasStaffHasRolePK object
     */
    public static SchoolHasStaffHasRolePK getSchoolHasStaffHasRolePK() {

        SchoolHasStaffHasRolePK schoolHasStaffHasRolePK =  getSchoolHasStaffHasRolePK(
	        getSchool(), getStaffHasRole());

		return schoolHasStaffHasRolePK;
       
    }

     /**
     * Data pool factory for SchoolHasStaffHasRolePK.
     * @param schoolIdschool A valid School object
     * @param staffHasRoleIdstaffHasRole A valid StaffHasRole object
     * @return SchoolHasStaffHasRolePK A SchoolHasStaffHasRolePK object
     */
    public static SchoolHasStaffHasRolePK getSchoolHasStaffHasRolePK(School schoolIdschool, StaffHasRole staffHasRoleIdstaffHasRole) {
        SchoolHasStaffHasRolePK schoolHasStaffHasRolePK = new SchoolHasStaffHasRolePK();     
        schoolHasStaffHasRolePK.setSchoolIdschool(schoolIdschool);
        schoolHasStaffHasRolePK.setStaffHasRoleIdstaffHasRole(staffHasRoleIdstaffHasRole);

        return schoolHasStaffHasRolePK;
    }

    /**
     * Data pool factory for Section.
     * @return SectionA Section object
     */
    public static Section getSection() {

        Section section = new Section();    
        
        section.setSectionName(BasicDataGenerator.generateRandomString(45));

        return section;
    }

    /**
     * Data pool factory for SectionHasStaffHasRole.
     * @return SectionHasStaffHasRoleA SectionHasStaffHasRole object
     */
    public static SectionHasStaffHasRole getSectionHasStaffHasRole() {

        SectionHasStaffHasRole sectionHasStaffHasRole = new SectionHasStaffHasRole();    
        
        sectionHasStaffHasRole.setId(getSectionHasStaffHasRolePK());

        return sectionHasStaffHasRole;
    }

    /**
     * Data pool factory for SectionHasStaffHasRolePK.
     * @return SectionHasStaffHasRolePK A SectionHasStaffHasRolePK object
     */
    public static SectionHasStaffHasRolePK getSectionHasStaffHasRolePK() {

        SectionHasStaffHasRolePK sectionHasStaffHasRolePK =  getSectionHasStaffHasRolePK(
	        getSection(), getStaffHasRole());

		return sectionHasStaffHasRolePK;
       
    }

     /**
     * Data pool factory for SectionHasStaffHasRolePK.
     * @param sectionIdsection A valid Section object
     * @param staffHasRoleIdstaffHasRole A valid StaffHasRole object
     * @return SectionHasStaffHasRolePK A SectionHasStaffHasRolePK object
     */
    public static SectionHasStaffHasRolePK getSectionHasStaffHasRolePK(Section sectionIdsection, StaffHasRole staffHasRoleIdstaffHasRole) {
        SectionHasStaffHasRolePK sectionHasStaffHasRolePK = new SectionHasStaffHasRolePK();     
        sectionHasStaffHasRolePK.setSectionIdsection(sectionIdsection);
        sectionHasStaffHasRolePK.setStaffHasRoleIdstaffHasRole(staffHasRoleIdstaffHasRole);

        return sectionHasStaffHasRolePK;
    }

    /**
     * Data pool factory for Staff.
     * @return StaffA Staff object
     */
    public static Staff getStaff() {

        Staff staff = new Staff();    
        
        staff.setFullName(BasicDataGenerator.generateRandomString(100));
        staff.setName(BasicDataGenerator.generateRandomString(45));
        staff.setPhoto(BasicDataGenerator.generateRandomBinary(65535));
        staff.setStaffid(BasicDataGenerator.generateRandomString(45));

        return staff;
    }

    /**
     * Data pool factory for StaffHasRole.
     * @return StaffHasRole A StaffHasRole object
     */
    public static StaffHasRole getStaffHasRole() {

        StaffHasRole staffHasRole =  getStaffHasRole(
	        getRole(), getStaff());

		return staffHasRole;
       
    }

     /**
     * Data pool factory for StaffHasRole.
     * @param roleIdrole A valid Role object
     * @param staffIdstaff A valid Staff object
     * @return StaffHasRole A StaffHasRole object
     */
    public static StaffHasRole getStaffHasRole(Role roleIdrole, Staff staffIdstaff) {
        StaffHasRole staffHasRole = new StaffHasRole();     
        staffHasRole.setEndDate(BasicDataGenerator.generateDate());
		if (roleIdrole != null) {
			roleIdrole.addStaffHasRole (staffHasRole);
		}
		if (staffIdstaff != null) {
			staffIdstaff.addStaffHasRole (staffHasRole);
		}
        staffHasRole.setStartDate(BasicDataGenerator.generateDate());

        return staffHasRole;
    }

    /**
     * Data pool factory for Student.
     * @return StudentA Student object
     */
    public static Student getStudent() {

        Student student = new Student();    
        
        student.setAddmisionNo(BasicDataGenerator.generateRandomString(45));
        student.setAddress(BasicDataGenerator.generateRandomString(400));
        student.setDob(BasicDataGenerator.generateDate());
        student.setFullName(BasicDataGenerator.generateRandomString(45));
        student.setGender(BasicDataGenerator.generateRandomString(10));
        student.setName(BasicDataGenerator.generateRandomString(45));
        student.setNameWtInitial(BasicDataGenerator.generateRandomString(45));
        student.setPhoto(BasicDataGenerator.generateRandomBinary(2147483647));

        return student;
    }

    /**
     * Data pool factory for StudentClassroomSubject.
     * @return StudentClassroomSubject A StudentClassroomSubject object
     */
    public static StudentClassroomSubject getStudentClassroomSubject() {

        StudentClassroomSubject studentClassroomSubject =  getStudentClassroomSubject(
	        getClassroomStudent(), getClassroomSubject());

		return studentClassroomSubject;
       
    }

     /**
     * Data pool factory for StudentClassroomSubject.
     * @param classroomStudentIdclassroomStudent A valid ClassroomStudent object
     * @param classroomSubjectIdclassroomSubject A valid ClassroomSubject object
     * @return StudentClassroomSubject A StudentClassroomSubject object
     */
    public static StudentClassroomSubject getStudentClassroomSubject(ClassroomStudent classroomStudentIdclassroomStudent, ClassroomSubject classroomSubjectIdclassroomSubject) {
        StudentClassroomSubject studentClassroomSubject = new StudentClassroomSubject();     
		if (classroomStudentIdclassroomStudent != null) {
			classroomStudentIdclassroomStudent.addStudentClassroomSubject (studentClassroomSubject);
		}
		if (classroomSubjectIdclassroomSubject != null) {
			classroomSubjectIdclassroomSubject.addStudentClassroomSubject (studentClassroomSubject);
		}

        return studentClassroomSubject;
    }

    /**
     * Data pool factory for Subject.
     * @return SubjectA Subject object
     */
    public static Subject getSubject() {

        Subject subject = new Subject();    
        
        subject.setIsOptional(BasicDataGenerator.generateRandomBoolean());
        subject.setName(BasicDataGenerator.generateRandomString(45));

        return subject;
    }

    /**
     * Data pool factory for User.
     * @return User A User object
     */
    public static User getUser() {

        User user =  getUser(
	        getUserRole());

		return user;
       
    }

     /**
     * Data pool factory for User.
     * @param userRoleIduserRole A valid UserRole object
     * @return User A User object
     */
    public static User getUser(UserRole userRoleIduserRole) {
        User user = new User();     
        user.setEmail(BasicDataGenerator.generateRandomString(45));
        user.setPassword(BasicDataGenerator.generateRandomString(45));
        user.setUserName(BasicDataGenerator.generateRandomString(45));
		if (userRoleIduserRole != null) {
			userRoleIduserRole.addUser (user);
		}

        return user;
    }

    /**
     * Data pool factory for UserRole.
     * @return UserRoleA UserRole object
     */
    public static UserRole getUserRole() {

        UserRole userRole = new UserRole();    
        
        userRole.setName(BasicDataGenerator.generateRandomString(45));

        return userRole;
    }
    /** Returns the commit order of this database. 
	 * Useful for iterating through the classes for deletion in the right order. 
	 * @return String[] list of classes
	 */
	public static String[] getDBCommitOrder() {
		return commitOrder;
	}
	
	/**
	 * @param className classname to return
	 * @return the tabledeps for the given class name
	 */
	public static Collection<String> getTabledeps(String className) {
		return tableDeps.get(className);
	}
	
}
